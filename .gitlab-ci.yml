stages:          # List of stages for jobs, and their order of execution
  - prepare
  - process
  - push

variables:
  GIT_STRATEGY: clone
  INTERNAL_BRANCH: "dev"

before_script:
  - export no_proxy=localhost,127.0.0.1,.svc,pjlab.org.cn,cn-shanghai.aliyuncs.com,eng-center-registry.cn-shanghai.cr.aliyuncs.com,.0,.1,.2,.3,.4,.5,.6,.7,.8,.9,.10,.11,.12,.13,.14,.15,.16,.17,.18,.19,.20,.21,.22,.23,.24,.25,.26,.27,.28,.29,.30,.31,.32,.33,.34,.35,.36,.37,.38,.39,.40,.41,.42,.43,.44,.45,.46,.47,.48,.49,.50,.51,.52,.53,.54,.55,.56,.57,.58,.59,.60,.61,.62,.63,.64,.65,.66,.67,.68,.69,.70,.71,.72,.73,.74,.75,.76,.77,.78,.79,.80,.81,.82,.83,.84,.85,.86,.87,.88,.89,.90,.91,.92,.93,.94,.95,.96,.97,.98,.99,.100,.101,.102,.103,.104,.105,.106,.107,.108,.109,.110,.111,.112,.113,.114,.115,.116,.118,.119,.120,.121,.122,.123,.124,.125,.126,.127,.128,.129,.130,.131,.132,.133,.134,.135,.136,.137,.138,.139,.140,.141,.142,.143,.144,.145,.146,.147,.148,.149,.150,.151,.152,.153,.154,.156,.157,.158,.159,.160,.161,.162,.163,.164,.165,.166,.167,.168,.169,.170,.171,.172,.173,.174,.175,.176,.177,.178,.179,.180,.181,.182,.183,.184,.185,.186,.187,.188,.189,.190,.191,.192,.193,.194,.195,.196,.197,.198,.199,.200,.201,.202,.203,.204,.205,.206,.207,.208,.209,.210,.211,.212,.213,.214,.215,.216,.217,.218,.219,.220,.221,.222,.223,.225,.226,.227,.228,.229,.230,.231,.232,.233,.234,.235,.236,.237,.238,.239,.240,.241,.242,.243,.244,.245,.246,.247,.248,.249,.250,.251,.252,.253,.254,.255
  - export http_proxy=$PROXY
  - export https_proxy=$PROXY
  - pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple

lint:       # This job runs in the build stage, which runs first.
  stage: prepare
  image: 'gaotongxiao/lint:0.1.0'  # This image is built from python:3.10 with pre-commit hooks installed
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - when: always
  tags:
    - opencompass
  script:
    - pre-commit run --all-files -c .pre-commit-config-zh-cn.yaml

pull_github:       # This job runs in the build stage, which runs first.
  stage: prepare
  image: python:3.10.0
  tags:
    - opencompass
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - if: '$CI_COMMIT_BRANCH == $INTERNAL_BRANCH'
      when: never
    - if: '$CI_COMMIT_AUTHOR !~ "bot <bot@bot.com>" && $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"'
      when: always
  script:
    - git remote add gh https://github.com/InternLM/opencompass.git
    - git fetch gh main:github
    - git fetch origin "$INTERNAL_BRANCH":"$INTERNAL_BRANCH"
    - pip install gitpython requests
    - git checkout $INTERNAL_BRANCH
    - python opencompass/utils/internal/sync/patch_from_github.py github $INTERNAL_BRANCH $LARK_URL
    - git remote set-url origin https://oauth2:$GIT_ACCESS_TOKEN@gitlab.pjlab.org.cn/openmmlab/bigmodel/opencompass.git
    - git push origin $INTERNAL_BRANCH


process_branch:
  stage: process
  image: 'gaotongxiao/lint:0.1.0'  # This image is built from python:3.10 with pre-commit hooks installed
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == $INTERNAL_BRANCH'
      when: never
    - if: '$CI_COMMIT_AUTHOR !~ "bot <bot@bot.com>" && $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"'
      when: always
  tags:
    - opencompass
  script:
    # Extract the author info from the latst commit
    - AUTHOR_NAME=$(git log -1 --pretty=format:'%an')
    - AUTHOR_EMAIL=$(git log -1 --pretty=format:'%ae')
    - COMMIT_MESSAGE=$(git log -1 --pretty=%B)
    - pre-commit install -c .pre-commit-config-zh-cn.yaml

    # change its working path to bypass some annoying python import issues
    # tmp/ won't be tracked by git
    - mkdir tmp/
    - cp opencompass/utils/lark.py tmp/lark.py

    # # Update the internal ref branch
    - pip install requests
    - git remote add gh https://github.com/InternLM/opencompass.git
    - git fetch gh main:github
    - git fetch origin $INTERNAL_BRANCH:$INTERNAL_BRANCH

    # Reset author info (patch_from_github modifies author info)
    - git config user.name "${AUTHOR_NAME}"
    - git config user.email "${AUTHOR_EMAIL}"

    - git merge $INTERNAL_BRANCH --no-edit || { python tmp/lark.py $LARK_URL "Please rebase it on the latest $INTERNAL_BRANCH locally and push again." --title "$CI_COMMIT_REF_NAME - Rebase failed. "; exit 1; }
    - python opencompass/utils/internal/sync/cleanup_internal.py
    - (git add . && git commit -m "$COMMIT_MESSAGE") || (git add . && git commit -m "$COMMIT_MESSAGE")  # in case of linting error

    - git diff github > changes.patch
    - |
      if [ -z $(cat changes.patch) ]; then
        exit
      fi

    - git checkout github -b github_$CI_COMMIT_REF_NAME
    - git apply changes.patch || exit
    - rm changes.patch
    - (git add . && git commit -m "$COMMIT_MESSAGE") || (git add . && git commit -m "$COMMIT_MESSAGE")  # in case of linting error

    - git remote set-url origin https://oauth2:$GIT_ACCESS_TOKEN@gitlab.pjlab.org.cn/openmmlab/bigmodel/opencompass.git
    - git push origin github_$CI_COMMIT_REF_NAME -f
    - export title="$CI_COMMIT_REF_NAME - its tidied-up version has been pushed."
    - echo $title
    - export content="Approve the pipeline workflow when you are sure that no internal code has been leaked. $CI_PROJECT_URL/-/commit/$(git log -1 --format="%H")"
    - python tmp/lark.py "$LARK_URL" "$content" --title "$title"


push_to_github_and_create_pr:
  stage: push
  # when: manual
  image: python:3.10.0
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == $INTERNAL_BRANCH'
      when: never
    - if: '$CI_COMMIT_AUTHOR !~ "bot <bot@bot.com>" && $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"'
      when: manual
  tags:
    - opencompass
  script:
    - git remote add forked_gh https://gitlab:$GITHUB_TOKEN@github.com/gaotongxiao/opencompass.git
    - git fetch origin github_$CI_COMMIT_REF_NAME:github_$CI_COMMIT_REF_NAME
    - git push forked_gh github_$CI_COMMIT_REF_NAME:github_$CI_COMMIT_REF_NAME --set-upstream -f
    - pip install requests
    # bypass some annoying python import issues
    # tmp/ won't be tracked by git
    - mkdir tmp/
    - cp opencompass/utils/lark.py tmp/lark.py
    - python tmp/lark.py "$LARK_URL" "Please create GitHub PR via https://github.com/gaotongxiao/opencompass/pull/new/github_$CI_COMMIT_REF_NAME" --title "$CI_COMMIT_REF_NAME - GitHub PR is on the way!"
    # If we can have access the key to the origin InterLM repo, we can fully automate the PR process with the following lines
    # - |
    #   type -p curl >/dev/null || (apt update && apt install curl -y)
    #   curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
    #   && chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
    #   && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
    #   && apt update \
    #   && apt install gh -y
    # - git remote set origin https://gitlab:$GITHUB_TOKEN@github.com/InternLM/opencompass.git
    # - echo $GITHUB_TOKEN | gh auth login --with-token
    # - git push origin github_$CI_COMMIT_REF_NAME --set-upstream
    # - gh pr create --title "[Migration] $COMMIT_MESSAGE" --body "Migrated PR" --repo InternLM/opencompass --head github_$CI_COMMIT_REF_NAME --base main
